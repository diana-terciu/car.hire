openapi: 3.0.1
info:
  title: Car Hire API
  version: 0.1.0
  contact:
    name: Your name here
  description: Car Hire API
servers:
  - url: http://localhost:{port}
    description: local environment
    
    variables:
      port:
        default: '8080'

tags:
  - name: sample
    description: Sample resource endpoint
    
security:
  - oAuth:
      - write
      - read
paths:
  /sample:
    get:
      tags:
        - sample
      summary: get sample
      description: returns a list of all the sample objects, without any filtering
      operationId: getSamples
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SampleDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  /users:
    get:
      tags:
        - user
      summary: get all users
      description: returns a list Return a list with all the users without any filtering
      operationId: getUsers
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
           $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - user
      summary: create a new user
      description: add a new user and returns it
      operationId: addUser
      requestBody:
        description: The user data to insert
        required: true
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/UserDTO'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  /users/{userId}:
   parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int32
   get:
     summary: Returns a user by ID.
     operationId: getUserById
     responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Invalid user id
        '404':
          description: User with the specified ID was not found
        '401':
          description: Unauthorized
   patch:
     summary: user update
     operationId: updateUser
     requestBody:
         content:
          application/json:
            schema:
                $ref: '#/components/schemas/UserDTO'
     responses:
        '200':
          description: success
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
   delete:
    summary: Delete user by id
    operationId: deleteUserById
    responses:
        '200':
          description: success
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /cars:
    post:
      tags:
        - car
      summary: create a new car
      description: add a new car and returns it
      operationId: addCar
      requestBody:
        description: The car data to insert
        required: true
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/CarDTO'
      responses:
        '201':
         $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  /cars/findByStatus:
    parameters:
        - name: status
          in: query
          required: true
          schema:
            type: string
    get:
      tags:
        - car
      summary: get cars filtered by status
      description: returns a list Return a list with  cars filtered by status
      operationId: getCarsByStatus
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
           $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  /cars/{carId}:
   parameters:
        - name: carId
          in: path
          description: Car ID
          required: true
          schema:
            type: integer
            format: int64
   get:
     summary: Returns a car by ID.
     operationId: getCarById
     responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarDTO'
        '400':
          description: Invalid car id
        '404':
          description: Car with the specified ID was not found
        '401':
          description: Unauthorized
   patch:
     summary: car update
     operationId: updateCar
     requestBody:
         content:
          application/json:
            schema:
                $ref: '#/components/schemas/CarDTO'
     responses:
        '204':
          description: Updated the car partially
   delete:
    summary: Delete car by id
    operationId: deleteCarById
    responses:
       '204':
          description: The car was  deleted
       '404':
          description: Car with the specified ID was not found
       '401':
          description: Unauthorized
  /rental:
    post:
      tags:
        - rental
      summary: create a new rental
      description: add a new rental and returns it
      operationId: addRental
      requestBody:
        description: The rental data to insert
        required: true
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/RentalDTO'
      responses:
        '201': 
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  /rental{userId}/{carId}:
    parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
        - in: path
          name: userId  
          required: true
          schema:
           type: integer
        - in: path
          name: carId  
          required: true
          schema:
           type: integer
    get:
      tags:
        - rental
      summary: get renatal filtered by user id, car id and status
      description: returns a list Return a list with  cars filtered by status
      operationId: getRentals
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
           $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  responses:
    Created:
      description: the id of the created entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedDTO'
    NotFound:
      description: the results are either empty or couldn't be found        
    Unauthorized:
      description: unauthorized
    BadRequest:
      description: bad request
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ValidationDTO'
    ServerError:
      description: internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
  schemas:
    ValidationDTO:
      type: object
      properties:
        code:
          type: string
        field:
          type: string
        description:
          type: string
    ErrorDTO:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    CreatedDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: the id of the created entity
    SampleDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: id of the sample
        name:
          type: string
          example: Sample name
          description: full name of the sample
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: id of the user
        firstName:
          type: string
          example: User first name
          description: first name of the user
        lastName:
          type: string
          example: User last name
          description: last name of the user
        email:
          type: string
          example: User email
          description: email of the user
        password:
          type: string
          example: User password
          description: password of the user
        username:
          type: string
          example: User username
          description: username of the user
        countryOfResidence:
          $ref: '#/components/schemas/CountryDTO'
        status:
          type: string
          example: User status
          description: status of the user
          enum:
           - ACTIVE
           - DELETED
    CountryDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: country id
        name:
          type: string
          example: Romania
          description: the name of the country
        isoCode:
          type: string
          example: ROU
          description: the iso code of the country
    CarDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: id of the car
        make:
          type: string
          example: car maker
          description: car maker
        model:
          type: string
          example: car model
          description: the car model
        year:
          type: string
          example: car year
          description: car year
        mileage:
          type: string
          example: car mileage
          description: car mileage
        fuel:
          type: string
          example: car fuel type
          description: car fuel type
        classType:
          type: string
          example: car class tyype
          description: class type
        status:
          type: string
          example: User status
          description: status of the user
          enum:
           - ACTIVE
           - DELETED
    RentalDTO:
      type: object
      properties:
        id:
          type: string
          description: renatal id
        rentalStartDate:
          type: string
          format: date-time
          description: rental start date
        rentalEndDate:
          type: string
          format: date-time
          description: rental end date
        user:
          $ref: '#/components/schemas/UserDTO'
        car:
          $ref: '#/components/schemas/CarDTO'
        status:
          type: string
          example: Rental status
          description: Rental status
          enum:
           - ACTIVE
           - CANCELLED
  securitySchemes:
    oAuth:
      type: oauth2
      description: This API uses OAuth2 with the password flow
      flows:
        password:
          tokenUrl: /oauth/token
          scopes:
            read: get information from the API
            write: use the API to make changes to the supporting data model       